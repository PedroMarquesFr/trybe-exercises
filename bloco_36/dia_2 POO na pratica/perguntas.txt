Exerc√≠cio 1: Lembra do exerc√≠cio da TV que j√° abstra√≠mos? Hoje vamos implementar ele, por√©m com algumas modifica√ß√µes. Veja o diagrama abaixo:

Diagrama de classes da TV
Atributos:
volume - ser√° inicializado com um valor de 50 e s√≥ pode estar entre 0 e 99;
canal - ser√° inicializado com um valor de 1 e s√≥ pode estar entre 1 e 99;
tamanho - ser√° inicializado com o valor do par√¢metro;
ligada - ser√° inicializado com o valor de False , pois est√° inicialmente desligado.
Todos os atributos devem ser privados.
M√©todos:
aumentar_volume - aumenta o volume de 1 em 1 at√© o m√°ximo de 99;
diminuir_volume - diminui o volume de 1 em 1 at√© o m√≠nimo de 0;
modificar_canal - altera o canal de acordo com o par√¢metro recebido e deve lan√ßar uma exce√ß√£o ( ValueError ) caso o valor esteja fora dos limites;
ligar_desligar - alterna o estado da TV entre ligado e desligado ( True / False ).
Exerc√≠cio 2: Defina uma classe Estatistica que calcule m√©dia, mediana e moda de uma lista de n√∫meros.
üê¶ Dica: Utilize m√©todos de classe.

Diagrama de classes da Estatistica
Exerc√≠cio 3: Que tal agora relembrarmos o exerc√≠cio das figuras geom√©tricas? Implemente o diagrama de classes abaixo.

Diagrama de classes das figuras geom√©tricas
Exerc√≠cio 4: Implemente um sistemas de logs por n√≠vel de severidade, seguindo o diagrama abaixo.

Diagrama de classes do sistema de logs
Classe Log
Atributos:
manipuladores - Ser√° inicializado com um conjunto de subclasses de ManipuladorDeLog ;
M√©todos:
adicionar_manipulador - adiciona um manipulador ao conjunto de manipuladores do gerenciamento de logs ( Log );
info - dispara logs com n√≠vel de severidade "INFO" ;
alerta - dispara logs com n√≠vel de severidade "ALERTA" ;
erro - dispara logs com n√≠vel de severidade "ERRO" ;
debug - dispara logs com n√≠vel de severidade "DEBUG" ;
__log - dispara os logs formatados para todos os manipuladores (invocado para cada n√≠vel de severidade, para evitar duplica√ß√£o de c√≥digo);
__formatar - formata os logs de acordo com o padr√£o "[ERRO - 01/01/2020 13:00:00]: ZeroDivisionError: division by zero";
A interface de manipula√ß√£o de logs deve utilizar m√©todos de classe.
üê¶ Dica: Voc√™ pode utilizar a fun√ß√£o print em tela ou em arquivo (que pode ter um nome padr√£o).
Exerc√≠cio 5: Implemente um gerenciador de quartos de hotel, simplificado, conforme o diagrama a seguir.

Diagrama de classes do sistema de hoteis
Classe Quarto
Atributos:
numero - n√∫mero do quarto;
andar - andar do quarto;
quantidade_de_hospedes - capacidade de hospedagem do quarto;
preco - valor da hospedagem;
reservado - sempre inicializado com False , indica o estado do quarto.
Classe Hospede
Atributos:
nome - nome do hospede;
cpf - CPF do hospede (para fins de simplifica√ß√£o, n√£o √© necess√°rio validar o CPF).
Classe Reserva
Atributos:
quarto - √© composto por uma inst√¢ncia de quarto;
hospede - √© composto por uma inst√¢ncia de hospede.
Classe Hotel
Atributos:
nome - nome do hotel;
quartos - √© composto por uma lista de inst√¢ncias de quarto;
reservas - √© composto por uma lista de inst√¢ncias de reserva;
M√©todos:
check_in - recebe uma quantidade indefinida de hospedes e busca por um quarto dispon√≠vel com capacidade suficiente. Se houver um quarto dispon√≠vel, altera o estado do quarto e cria uma reserva para cada hospede. Caso n√£o haja quartos dispon√≠veis deve lan√ßar a exce√ß√£o IndexError com a mensagem "N√£o h√° quartos dispon√≠veis para essa quantidade de hospedes";
check_out - recebe uma inst√¢ncia de quarto, alterando seu estado e removendo todas as suas reservas;
quartos_disponiveis - retorna uma lista de quartos dispon√≠veis que comportam uma quantidade_de_hospedes (passado por par√¢metro), priorizada da menor capacidade de hospedes poss√≠vel para a maior. Lembre-se, para que um quarto esteja dispon√≠vel, al√©m de respeitar a capacidade, ele n√£o pode estar reservado.
Observa√ß√£o: considere todos os atributos como sendo p√∫blicos para fins de simplifica√ß√£o da implementa√ß√£o.
